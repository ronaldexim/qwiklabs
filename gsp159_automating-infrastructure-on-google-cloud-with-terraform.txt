Automating Infrastructure on Google Cloud with Terraform: Challenge Lab
https://www.qwiklabs.com/quests/159

Change: 

<PROJECT ID>, 

<INSTANCE_1-ID> - Compute Engine > VM Instances, click `tf-instance-1`, copy `Instance ID`, 

<INSTANCE_2-ID>  - Compute Engine > VM Instances, click `tf-instance-2`, copy `Instance ID`,

`yes` after `terraform apply`

--------------------------

cd ~
touch main.tf
touch variables.tf
mkdir -p modules/instances
mkdir -p modules/storage
cd ~/modules/instances
touch instances.tf
touch outputs.tf
touch variables.tf
cd ~/modules/storage
touch storage.tf
touch outputs.tf
touch variables.tf
cd ~

--------------------------

cat << EOF > ~/variables.tf
variable "region" {
 default = "us-central1"
}

variable "zone" {
 default = "us-central1-a"
}

variable "project_id" {
 default = "<PROJECT ID>"
}
EOF

--------------------------

cat << EOF > ~/modules/instances/variables.tf
variable "region" {
 default = "us-central1"
}

variable "zone" {
 default = "us-central1-a"
}

variable "project_id" {
 default = "<PROJECT ID>"
}
EOF

--------------------------

cat << EOF > ~/modules/storage/variables.tf
variable "region" {
 default = "us-central1"
}

variable "zone" {
 default = "us-central1-a"
}

variable "project_id" {
 default = "<PROJECT ID>"
}
EOF

--------------------------

cat << EOF > ~/main.tf
terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "3.55.0"
    }
  }
}

provider "google" {
  project     = var.project_id
  region      = var.region

  zone        = var.zone
}

module "instances" {

  source     = "./modules/instances"

}
EOF

--------------------------

terraform init

--------------------------

cat << EOF > ~/modules/instances/instances.tf
resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "n1-standard-1"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "n1-standard-1"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
}
EOF

--------------------------

terraform import module.instances.google_compute_instance.tf-instance-1 <INSTANCE_1-ID>

terraform import module.instances.google_compute_instance.tf-instance-2 <INSTANCE_2-ID>

--------------------------

terraform plan

terraform apply

--------------------------  check Task 2

cat << EOF > ~/modules/storage/storage.tf
resource "google_storage_bucket" "storage-bucket" {
  name          = var.project_id
  location      = "US"
  force_destroy = true
  uniform_bucket_level_access = true
}
EOF

-------------------------- add to ~/main.tf

module "storage" {
source     = "./modules/storage"
}

--------------------------

terraform init

terraform apply

-------------------------- update terraform {} in ~/main.tf

terraform {
  backend "gcs" {
    bucket  = "<PROJECT ID>"
 prefix  = "terraform/state"
  }
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "3.55.0"
    }
  }
}

--------------------------

terraform init

--------------------------  check Task 3

cat << EOF > ~/modules/instances/instances.tf
resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "n1-standard-2"
  zone         = var.zone
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "n1-standard-2"
  zone         = var.zone
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
}

resource "google_compute_instance" "tf-instance-3" {
  name         = "tf-instance-3"
  machine_type = "n1-standard-2"
  zone         = var.zone
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
}
EOF

--------------------------

terraform init

terraform apply

--------------------------  check Task 4

terraform taint module.instances.google_compute_instance.tf-instance-3

terraform plan

terraform apply

-------------------------- delete from ~/modules/instances/instances.tf

resource "google_compute_instance" "tf-instance-3" {
  name         = "tf-instance-3"
  machine_type = "n1-standard-2"
  zone         = var.zone
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
}

--------------------------

terraform apply

-------------------------- check Task 5

-------------------------- add to ~/main.tf

module "vpc" {
    source  = "terraform-google-modules/network/google"
    version = "~> 2.5.0"

    project_id   = var.project_id
    network_name = "terraform-vpc"
    routing_mode = "GLOBAL"

    subnets = [
        {
            subnet_name           = "subnet-01"
            subnet_ip             = "10.10.10.0/24"
            subnet_region         = "us-central1"
        },
        {
            subnet_name           = "subnet-02"
            subnet_ip             = "10.10.20.0/24"
            subnet_region         = "us-central1"
            subnet_private_access = "true"
            subnet_flow_logs      = "true"
            description           = "This subnet has a description"
        }
    ]
}

--------------------------

terraform init

terraform apply

--------------------------

cat << EOF > ~/modules/instances/instances.tf
resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "n1-standard-2"
  zone         = var.zone
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "terraform-vpc"
    subnetwork = "subnet-01"
  }
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "n1-standard-2"
  zone         = var.zone
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "terraform-vpc"
    subnetwork = "subnet-02"
  }
}
EOF

--------------------------

terraform init

terraform apply

-------------------------- check Task 6

-------------------------- add to ~/main.tf

resource "google_compute_firewall" "tf-firewall" {
  name    = "tf-firewall"
 network = "projects/<PROJECT ID>/global/networks/terraform-vpc"

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_tags = ["web"]
  source_ranges = ["0.0.0.0/0"]
}

--------------------------

terraform init

terraform apply

-------------------------- check Task 7
